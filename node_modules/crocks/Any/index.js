/** @license ISC License (c) copyright 2016 original and current authors */
/** @author Ian Hofmann-Hicks (evil) */

var VERSION = 2

var _implements = require('../core/implements')
var _inspect = require('../core/inspect')
var _equals = require('../core/equals')
var type = require('../core/types').type('Any')
var _type = require('../core/types').typeFn(type(), VERSION)
var fl = require('../core/flNames')

var isFunction = require('../core/isFunction')
var isNil = require('../core/isNil')
var isSameType = require('../core/isSameType')

var _empty =
  function () { return Any(false); }

function Any(b) {
  var obj;

  var x = isNil(b) ? _empty().valueOf() : b

  if(!arguments.length || isFunction(x)) {
    throw new TypeError('Any: Non-function value required')
  }

  var valueOf =
    function () { return !!x; }

  var empty =
    _empty

  var inspect =
    function () { return ("Any" + (_inspect(valueOf()))); }

  var equals =
    function (m) { return isSameType(Any, m)
      && _equals(x, m.valueOf()); }

  function concat(method) {
    return function(m) {
      if(!isSameType(Any, m)) {
        throw new TypeError(("Any." + method + ": Any required"))
      }

      return Any(m.valueOf() || valueOf())
    }
  }

  return ( obj = {
    inspect: inspect, toString: inspect,
    equals: equals, valueOf: valueOf, type: type, empty: empty
  }, obj['@@type'] = _type, obj.concat = concat('concat'), obj[fl.equals] = equals, obj[fl.concat] = concat(fl.concat), obj[fl.empty] = empty, obj.constructor = Any, obj )
}

Any['@@implements'] = _implements(
  [ 'equals', 'concat', 'empty' ]
)

Any.empty = _empty
Any.type  = type

Any[fl.empty] = _empty
Any['@@type'] = _type

module.exports = Any
